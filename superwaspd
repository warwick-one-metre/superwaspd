#!/usr/bin/env python3
#
# This file is part of superwaspd.
#
# superwaspd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# superwaspd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with superwaspd.  If not, see <http://www.gnu.org/licenses/>.

"""Front end for the SuperWASP weather log the Warwick one-metre telescope"""

import datetime
import urllib.request
import Pyro4
import warwick.observatory as observatory

# Set automatically when generating RPM package
SOFTWARE_VERSION = 'UNKNOWN'

SUPERWASP_WEATHER_URI = 'http://wasp.warwick.ac.uk/swasp/main/monitor/public/weather.log'
SUPERWASP_QUERY_TIMEOUT = 5

# pylint: disable=broad-except
# pylint: disable=too-few-public-methods
# pylint: disable=no-self-use

class SuperWASPWeatherDaemon:
    """Wraps a web request to the SuperWASP Weather log"""

    @Pyro4.expose
    def last_measurement(self):
        """Query the latest valid measurement.
        May return None if no data is available"""
        now = datetime.datetime.utcnow
        try:
            with urllib.request.urlopen(SUPERWASP_WEATHER_URI) as response:
                data = response.readlines()[-1].decode('ascii').split()

            # TODO: Convert swasp mjd to date
            date = now()

            return {
                'date': date.strftime('%Y-%m-%dT%H:%M:%SZ'),
                'jd' : round(float(data[0]), 6),
                'sky_temp': round(float(data[8]), 2),
                'wind_speed' : int(data[1]),
                'wind_direction' : int(data[2]),
                'ext_temperature' : round(float(data[11]), 2),
                'ext_humidity': round(float(data[14]), 1),
                'dew_point_delta': round(float(data[11]) - float(data[17]), 2),
                'pressure': round(float(data[5]), 2),
                'software_version': SOFTWARE_VERSION
            }

        except Exception as exception:
            print('{} ERROR: failed to query from SuperWASP weather log: {}' \
                  .format(datetime.datetime.utcnow(), str(exception)))
            observatory.log.error('superwaspd', 'Failed to read weather.log (' \
                                  + str(exception) + ')')
            return None

if __name__ == '__main__':
    observatory.daemons.superwasp_log.launch(SuperWASPWeatherDaemon())
